{
    "header": {
        "title": "Path tracer",
        "author": "Daniel Cho",
        "date": "Sept. 8, 2021"
    },
    "body": [
        "![Diffuse Cornel Box](programming/diffuse.png)",
        "In this project, I build an unbiased path tracer in C++/OpenGL. Although similar to a ray tracer, a path tracer trades performance for more realistic results, which often relegates it to offline rendering rather than real-time applications. This is due to their handling of light transport and noise reduction, topics which we'll cover in this blog.",
        "#Introduction to the rendering equation",
        "Any path tracer starts with the rendering equation (`rendering equation|https://en.wikipedia.org/wiki/Rendering_equation`, `more detail|https://dl.acm.org/doi/10.1145/15886.15902`),",
        "![Rendering equation](programming/rendering_equation.png)",
        "which looks daunting at first, but boils down to a few maneagble components. The first equation essentially states that the total spectral radiance at a point/time is the sum of how much radiance it gives off, and how much is reflected off that point at a specific time.",
        "The second equation states that the reflected radiance is essentially the sum of the spectral radiance of all the rays that have bounced around in the scene and hit the point at the given time. Now, the function f is formally the bidirectional reflectance distribution function, but essentially this means it dictates how rays of spectral radiance interact with the material. In other words, this function affects the rendering of materials. For exmaple, a perfect mirror would perfectly reflect radiance that hits the point, while a diffuse material would not reflect much light at all and instead show more of its own color. In the case of glass, light can refract and skew in directions depending on the angle of the surface as well as the material.",
        "#Monte Carlo sampling",
        "This equation creates the foundation for rendering but raises a new challenge in terms of its computaiton. Clearly, we cannot infinitely bounce rays in a finite amount of time. As a result, we employ Monte Carlo sampling (a fancy way of saying we randomly stop some rays of light). Each time light hits a surface, we give it some probability of stopping, which (if that probability is greater than 0) ensures that all rays of light will stop eventually.",
        "If you want some more formality, you can dive into the proofs where they'll show that this approximation converges to the true value of the equation, but we'll omit that in this blog. However, this is an important aspect of ray or path tracers because it is now defined to be unbiased. In other words, two renderings of the same scene will converge to the same image.",
        "Now, a biased renderer does not give this guarantee. If we tried to render a single image by separately rendering a quadrant of the image, its composition may have a noticeable difference between each quadrant. However, biased renders are great for performance. Denoising techniques, photon mapping, etc. can greatly speed up a renderer, which has allowed for real-time applications.",
        "![Mirror Cornel Box](programming/mirror.png)",
        "#Materials defined as BRDF's and BSDF's",
        "Now, I previously mentioned materials in the form of the function f, which can be defined as a Bidirectional Scattering Distribution Function (BSDF). Now there also exist Bidirectional Reflectance Distribution Functions (BRDF) which are a subset of BSDF's which only handles reflections and is therefore only used in opaque materials, while BSDF's can handle both reflection and refraction to include translucent materials like glass.",
        "An interesting side note is that in materials with refraction, edges of something like a sphere also reflect light like a mirror. This is because rays of light no longer fit within the critical angle and therefore these rays are reflected inside the material. As a result, we see at the edges mirror-like reflections. This phenomenon is called Total Internal Reflection (`reference|https://www.britannica.com/science/total-internal-reflection`).",
        "![Refraction Cornel Box](programming/refraction.png)",
        "In practice, when we project a ray of light from our camera and hit an object, we retrieve material information and use the correct BSDF profile in the calculation.",
        "#Future plans for this blog",
        "In future iterations of this blog, I hope to cover more algorithmic components and more equations involved in creating a path tracer. By the end of the iterations, the final blog should detail everything needed to actually code a path tracer. Moreover, hopefully I'll integrate math text so that equation will no longer just be images.",
        "For now, this is hopefully enough of an introduction to reasonably dive into making/understanding a path tracer.",
        "If there's anything specific you'd like to see, feel free to reach out."
    ]
}